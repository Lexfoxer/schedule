// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Day, Lessons, Schema, closeDB, db, filter_day, filter_object, filter_room, mongoose, my_date, query_find, query_find_one, tress;

  mongoose = require('mongoose');

  tress = require('tress');

  my_date = require('./my_date');

  Schema = mongoose.Schema;

  mongoose.Promise = global.Promise;

  mongoose.connect('mongodb://localhost:27017/MySchedule');

  Day = require('./structure.js').Day;

  Lessons = require('./structure.js').Lessons;

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  query_find = function(query, callback) {
    return Day.find(query, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  query_find_one = function(query, callback) {
    return Day.findOne(query, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  closeDB = function(callback) {
    db.close();
    return console.log('DB MySchedule close');
  };

  filter_day = function(day_week_code, callback) {
    return query_find_one({
      day_week_code: day_week_code
    }, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  filter_room = function(string_room, callback) {
    string_room = string_room.toString().toUpperCase();
    return query_find({
      lessons: {
        $elemMatch: {
          class_room: string_room
        }
      }
    }, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  filter_object = function(obj_query, callback) {
    if (typeof obj_query !== object) {
      callback('no object');
    }
    return query_find(obj_query, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  module.exports = {
    day: filter_day,
    room: filter_room,
    object: filter_object,
    close: closeDB
  };

}).call(this);
