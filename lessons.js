// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var Day, Lesson, Schema, db, dic_date, filter_room, filter_today, mongoose, now_date, query_find, tress;

  mongoose = require('mongoose');

  tress = require('tress');

  Schema = mongoose.Schema;

  mongoose.Promise = global.Promise;

  mongoose.connect('mongodb://localhost:27017/MySchedule');

  db = mongoose.connection;

  db.on('error', console.error.bind(console, 'connection error:'));

  Day = mongoose.model('Day', new Schema({
    day_week: String,
    lessons: [Schema.Types.Mixed],
    army: Boolean
  }));

  Lesson = mongoose.model('Lesson', new Schema({
    even_week: Number,
    number_lesson: Number,
    title: String,
    number_week: [Number],
    start_week: Number,
    class_room: String
  }));

  dic_date = {
    '0': 'Воскресенье',
    '1': 'Понедельник',
    '2': 'Вторник',
    '3': 'Среда',
    '4': 'Четверг',
    '5': 'Пятница',
    '6': 'Суббота'
  };

  now_date = new Date();

  query_find = function(query, callback) {
    return Day.find(query, function(err, data) {
      if (err) {
        callback(err);
      }
      return callback(null, data);
    });
  };

  filter_today = function() {
    var getDay;
    getDay = dic_date[now_date.getDay()];
    return query_find({
      day_week: getDay
    }, function(err, data) {
      if (err) {
        throw err;
      }
      return console.log(data);
    });
  };

  filter_room = function(string_room) {
    string_room = string_room.toString().toUpperCase();
    return query_find({
      lessons: {
        $elemMatch: {
          class_room: string_room
        }
      }
    }, function(err, data) {
      if (err) {
        throw err;
      }
      console.log(data);
      return db.close();
    });
  };

  filter_room('304б');

}).call(this);
